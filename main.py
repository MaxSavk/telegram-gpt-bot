from openai import OpenAI
from telethon.sync import TelegramClient
from telethon import events
from dotenv import load_dotenv
import os

load_dotenv()
client_ai = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
api_id = int(os.getenv("API_ID"))
api_hash = os.getenv("API_HASH")

client = TelegramClient("session", api_id, api_hash)

async def ask_gpt(message_text):
    try:
        response = client_ai.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": "–¢—ã –æ—á–µ–Ω—å –≥—Ä—É–±—ã–π –ø–∞—Ä–µ–Ω—å, –∫–æ—Ç–æ—Ä—ã–π —è–≤–Ω–æ –Ω–µ —Ä–∞–¥ —Å–æ–æ–±—â–µ–Ω–∏—é"},
                {"role": "user", "content": message_text}
            ],
            temperature=0.8,
            max_tokens=150
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        print(f"[GPT ERROR]: {e}")
        return "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ üòï"


async def main():
    await client.start()
    me = await client.get_me()

    print(f"–ü—Ä–∏–≤–µ—Ç, {me.first_name}!")
    print(f"Username: @{me.username}")
    print(f"ID: {me.id}")
    print("\n–¢–≤–æ–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∏:")

    async for dialog in client.iter_dialogs(limit=10):
        print(f"- {dialog.name} (id: {dialog.id})")

@client.on(events.NewMessage(incoming=True))
async def handler(event):
    try:
        sender = await event.get_sender()
        name = sender.first_name if sender else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
    except Exception as e:
        name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
        print(f"[‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è]: {e}")
    
    text = event.message.message
    print(f"\n‚úâÔ∏è –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {name}: {text}")
    
    reply = await ask_gpt(text)
    print(f"\nü§ñ GPT-–æ—Ç–≤–µ—Ç: {reply}")
    await event.reply(reply)

with client:
    client.loop.run_until_complete(main())
    print("\n–û–∂–∏–¥–∞—é –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è... (Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞)")
    client.run_until_disconnected()
